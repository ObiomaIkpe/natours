//BUILD THE QUERY
        //1A) FILTERING
        // const queryObj = { ...req.query }
        // const excludedFields = ['page', 'sort', 'limit', 'fields'];
        // excludedFields.forEach(el => delete queryObj[el]);
        // console.log(req.query, queryObj)

        // //1B) ADVANCED FILTERING
        // let queryStr = JSON.stringify(queryObj)
        // queryStr = queryStr.replace(/\b(gte|gt|lt|lte)\b/g, match => `$${match}`)
        // let query = Tour.find(JSON.parse(queryStr));



        //2) sorting
        // if(req.query.sort){
        //     const sortBy = req.query.sort.split(',').join('')
        //     query = query.sort(sortBy);

        // }
        // else{
        //     query.sort('-createdAt');
        // }

        //3) field limiting
        // if(req.query.fields){
        //     const fields = req.query.fields.split(',').join('');
        //     query = query.select(fields);
        // }else{
        //     query = query.select('-__v')
        // }

        //4) Pagination
        // const page = req.query.page * 1 || 1;
        // const limit = req.query.limit * 1 || 100;
        // const skip = (page - 1) * limit;

        // query = query.skip(skip).limit(limit);

        // if(req.query.page){
        //     const numTours = await Tour.countDocuments();
        //     if(skip > numTours){
        //         throw new error('this page does not exist');
        //     }
        // }
        //const query = Tour.find(queryObj)
        //EXECUTE THE QUERY
        //const tours = await Tour.find(queryObj); // if we use this method, we won't be able to chain other fitering methods.
